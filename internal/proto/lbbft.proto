syntax = "proto3";

package proto;

import "google/protobuf/empty.proto";

option go_package = "github.com/joe-zxh/lbbft/internal/proto";

service LBBFT {
  // log replication...
  rpc Ordering(OrderingArgs) returns (OrderingReply) {
  }

  rpc PrePrepare(PrePrepareArgs) returns (PrePrepareReply) {
  }

  rpc Prepare(PrepareArgs) returns (PrepareReply) {
  }

  rpc Commit(CommitArgs) returns (google.protobuf.Empty) {
  }

  // view change...
  rpc RequestVote(RequestVoteArgs) returns (RequestVoteReply) {
  }

  rpc NewView(NewViewArgs) returns (NewViewReply) {
  }
}

message RequestVoteArgs {
  uint32 CandidateID = 1; // only for simpicity, one should get the id from the communication protocol, rather than send it explicitly in the arguments.
  uint32 NewView = 2;
  uint32 LastPreparedView = 3;
  uint32 LastPreparedSeq = 4;
  bytes Digest = 5; // 用来验证PreparedCert里面的PrepareHash是否=hash(view+seq+"prepare"+Digest)
  QuorumCert PreparedCert = 6;
}

message RequestVoteReply {
  PartialSig Sig = 1; // sig content就是: view+candidate id
}

message NewViewArgs {
  uint32 NewView = 1;
  uint32 CandidateID = 2; // only for simpicity, one should get the id from the communication protocol, rather than send it explicitly in the arguments.
  QuorumCert NewViewCert = 3;
}

message NewViewReply {// 作为处理log inconsistency的开始...
  uint32 View = 1;
  uint32 Seq = 2;
}

message OrderingArgs {// request commands
  repeated Command Commands = 1;
}

message OrderingReply {
  uint32 Seq = 1;
  PartialSig Sig = 2; // 同时也作为leader的PrepareReply
}

message PrePrepareArgs {
  uint32 View = 1;
  uint32 Seq = 2;
  repeated Command Commands = 3;
}

message PrePrepareReply {
  PartialSig Sig = 1;
}

message PrepareArgs {
  uint32 View = 1;
  uint32 Seq = 2;
  QuorumCert QC = 3;
}

message PrepareReply {
  PartialSig Sig = 1;
}

message CommitArgs {
  uint32 View = 1;
  uint32 Seq = 2;
  QuorumCert QC = 3;
}

message Command {bytes Data = 1;}

// ecdsa的签名
message PartialSig {
  int32 ReplicaID = 1;
  bytes R = 2;
  bytes S = 3;
}

message QuorumCert {
  repeated PartialSig Sigs = 1;
  bytes SigContent = 2;
}