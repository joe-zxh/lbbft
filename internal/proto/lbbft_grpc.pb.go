// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// LBBFTClient is the client API for LBBFT service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LBBFTClient interface {
	Ordering(ctx context.Context, in *OrderingArgs, opts ...grpc.CallOption) (*OrderingReply, error)
	PrePrepare(ctx context.Context, in *PrePrepareArgs, opts ...grpc.CallOption) (*PrePrepareReply, error)
	Prepare(ctx context.Context, in *PrepareArgs, opts ...grpc.CallOption) (*PrepareReply, error)
	Commit(ctx context.Context, in *CommitArgs, opts ...grpc.CallOption) (*empty.Empty, error)
}

type lBBFTClient struct {
	cc grpc.ClientConnInterface
}

func NewLBBFTClient(cc grpc.ClientConnInterface) LBBFTClient {
	return &lBBFTClient{cc}
}

func (c *lBBFTClient) Ordering(ctx context.Context, in *OrderingArgs, opts ...grpc.CallOption) (*OrderingReply, error) {
	out := new(OrderingReply)
	err := c.cc.Invoke(ctx, "/proto.LBBFT/Ordering", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lBBFTClient) PrePrepare(ctx context.Context, in *PrePrepareArgs, opts ...grpc.CallOption) (*PrePrepareReply, error) {
	out := new(PrePrepareReply)
	err := c.cc.Invoke(ctx, "/proto.LBBFT/PrePrepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lBBFTClient) Prepare(ctx context.Context, in *PrepareArgs, opts ...grpc.CallOption) (*PrepareReply, error) {
	out := new(PrepareReply)
	err := c.cc.Invoke(ctx, "/proto.LBBFT/Prepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lBBFTClient) Commit(ctx context.Context, in *CommitArgs, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.LBBFT/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LBBFTServer is the server API for LBBFT service.
// All implementations must embed UnimplementedLBBFTServer
// for forward compatibility
type LBBFTServer interface {
	Ordering(context.Context, *OrderingArgs) (*OrderingReply, error)
	PrePrepare(context.Context, *PrePrepareArgs) (*PrePrepareReply, error)
	Prepare(context.Context, *PrepareArgs) (*PrepareReply, error)
	Commit(context.Context, *CommitArgs) (*empty.Empty, error)
	mustEmbedUnimplementedLBBFTServer()
}

// UnimplementedLBBFTServer must be embedded to have forward compatible implementations.
type UnimplementedLBBFTServer struct {
}

func (UnimplementedLBBFTServer) Ordering(context.Context, *OrderingArgs) (*OrderingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ordering not implemented")
}
func (UnimplementedLBBFTServer) PrePrepare(context.Context, *PrePrepareArgs) (*PrePrepareReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrePrepare not implemented")
}
func (UnimplementedLBBFTServer) Prepare(context.Context, *PrepareArgs) (*PrepareReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (UnimplementedLBBFTServer) Commit(context.Context, *CommitArgs) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedLBBFTServer) mustEmbedUnimplementedLBBFTServer() {}

// UnsafeLBBFTServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LBBFTServer will
// result in compilation errors.
type UnsafeLBBFTServer interface {
	mustEmbedUnimplementedLBBFTServer()
}

func RegisterLBBFTServer(s grpc.ServiceRegistrar, srv LBBFTServer) {
	s.RegisterService(&_LBBFT_serviceDesc, srv)
}

func _LBBFT_Ordering_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderingArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LBBFTServer).Ordering(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LBBFT/Ordering",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LBBFTServer).Ordering(ctx, req.(*OrderingArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _LBBFT_PrePrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrePrepareArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LBBFTServer).PrePrepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LBBFT/PrePrepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LBBFTServer).PrePrepare(ctx, req.(*PrePrepareArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _LBBFT_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LBBFTServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LBBFT/Prepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LBBFTServer).Prepare(ctx, req.(*PrepareArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _LBBFT_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LBBFTServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LBBFT/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LBBFTServer).Commit(ctx, req.(*CommitArgs))
	}
	return interceptor(ctx, in, info, handler)
}

var _LBBFT_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LBBFT",
	HandlerType: (*LBBFTServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ordering",
			Handler:    _LBBFT_Ordering_Handler,
		},
		{
			MethodName: "PrePrepare",
			Handler:    _LBBFT_PrePrepare_Handler,
		},
		{
			MethodName: "Prepare",
			Handler:    _LBBFT_Prepare_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _LBBFT_Commit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lbbft.proto",
}
